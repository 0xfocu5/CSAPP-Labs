#rsum.ys
#Execution begins at address 0
	.pos 0
	irmovq stack, %rsp    # set up stack pointer
	call main             # Execute main program
	halt				  # Terminate program


# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1, %rdi
	call rsum_list         # rsum_list(list_ptr ls)
	ret

rsum_list:
	pushq %r12
	xorq %rax, %rax        # val = 0
	andq %rdi, %rdi        
	je return              # if == 0 goto return
	mrmovq 0(%rdi), %r12   # get ls->val
	mrmovq 8(%rdi), %rdi   # get ls->next
	call rsum_list         # call rsum_list
	addq %r12, %rax        # val + rest
return:
	popq %r12
	ret
	
#Stack starts here and grows to lower addresses
	.pos 0x200
stack:
